AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  App:
    Type: String
    Default: app
  Env:
    Type: String
    Default: develop
    AllowedValues:
      - develop
      - staging
  StageName:
    Type: String
    Default: v1
    AllowedValues:
      - v1
      - v2

Mappings:
  EnvMap:
    develop:
      Env: develop

Resources:
  PathLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-${App}-path
      CodeUri: !Sub app/${App}Path
      Handler: index.handler
      Timeout: 10
      Runtime: nodejs18.x
      Environment:
        Variables:
          ENV: !Sub ${Env}

  KinesisLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-${App}-serial
      CodeUri: !Sub app/${App}Serial
      Handler: index.handler
      Timeout: 10
      Runtime: nodejs18.x
      Policies:
        - KinesisStreamReadPolicy:
           StreamName: !GetAtt KinesisStream.Arn
      Environment:
        Variables:
          ENV: !Sub ${Env}
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisStream.Arn
            StartingPosition: LATEST
            BatchSize: 20
            MaximumBatchingWindowInSeconds: 1
            MaximumRetryAttempts: 2
            BisectBatchOnFunctionError: true
            ParallelizationFactor: 10

  HttpApiAuth:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Env}-${App}-auth
      CodeUri: !Sub app/${App}Auth
      Handler: index.handler
      Timeout: 10
      Runtime: nodejs18.x
      Environment:
        Variables:
          ENV: !Sub ${Env}

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub ${Env}-${App}-http-api
      StageName: !Ref StageName
      Tags:
        Env: !Sub ${Env}
      StageVariables:
        StageVar: !Ref StageName
      FailOnWarnings: true
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '
          {
            "accountId":"$context.accountId",
            "requestTime":"$context.requestTime",
            "requestId":"$context.requestId",
            "ip":"$context.identity.sourceIp",
            "userAgent":"$context.identity.userAgent",
            "httpMethod":"$context.httpMethod",
            "resourcePath":"$context.path",
            "status":"$context.status",
            "protocol":"$context.protocol",
            "responseLength":"$context.responseLength",
            "integrationErrorMessage": "$context.integrationErrorMessage",
            "integrationStatus":"$context.integration.status",
            "integrationLatency":"$context.integration.latency",
            "integrationError":"$context.integration.error",
            "authorizerPrincipalId": "$context.authorizer.principalId",
            "body": "$context.authorizer.body",
            "authorizerError":"$context.authorizer.error",
            "responseType": "$context.error.responseType",
            "message": "$context.error.message"
          }'

  FunctionInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${Env}-${App}-http-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${Env}-${App}-http-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'

  HttpApiAuthorizer:
    Type: "AWS::ApiGatewayV2::Authorizer"
    Properties:
      Name: !Sub ${Env}-HttpApiAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerCredentialsArn: !GetAtt FunctionInvokeRole.Arn
      AuthorizerResultTtlInSeconds: 0
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${HttpApiAuth}/invocations"
      IdentitySource:
      - "$request.header.Authorization"
      AuthorizerPayloadFormatVersion: "2.0"
      EnableSimpleResponses: true

  PathLambdaRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /path"
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub "integrations/${PathLambdaIntegration}"

  PathLambdaIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      ConnectionType: "INTERNET"
      IntegrationType: "AWS_PROXY"
      IntegrationMethod: "POST"
      IntegrationUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${PathLambda}/invocations"
      CredentialsArn: !GetAtt LambdaProxyRole.Arn
      TimeoutInMillis: 20000
      PayloadFormatVersion: "1.0"

  KinesisProxyRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /kinesis"
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub "integrations/${KinesisProxyIntegration}"

  KinesisProxyIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref HttpApi
      ConnectionType: "INTERNET"
      IntegrationType: "AWS_PROXY"
      IntegrationSubtype: "Kinesis-PutRecord"
      RequestParameters:
        PartitionKey: "$request.body.segment"
        Data: "$request.body"
        StreamName: !Sub "${Env}-${App}-kinesis"
      CredentialsArn: !GetAtt KinesisProxyRole.Arn
      TimeoutInMillis: 20000
      PayloadFormatVersion: "1.0"

  KinesisProxyRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub ${Env}-apigw-kinesis-proxy-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      - "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"

  LambdaProxyRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub ${Env}-apigw-lambda-proxy-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      - "arn:aws:iam::aws:policy/AWSLambda_FullAccess"

  KinesisStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: !Sub ${Env}-${App}-kinesis
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      ShardCount: 1

  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /apigateway/${Env}-${App}-http-accessLog
      RetentionInDays: 3

  PathLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Env}-${App}-path
      RetentionInDays: 3

  SerialLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Env}-${App}-serial
      RetentionInDays: 3

  AuthLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Env}-${App}-auth
      RetentionInDays: 3

Outputs:
  HttpApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/'
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: HttpApi
