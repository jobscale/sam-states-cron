AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  Env:
    Type: String
    Default: develop
    AllowedValues:
    - develop
    - staging
  AppPath:
    Type: String
    Default: app
  StageName:
    Type: String
    Default: v1
    AllowedValues:
    - v1
    - v2

Mappings:
  EnvMap:
    develop:
      Env: develop

Resources:
  ContainerLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      FunctionName: !Sub ${AWS::StackName}-container
      MemorySize: 512
      Timeout: 900
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref AutoscalingSampleTable
      Tags:
        Env: !Sub ${Env}
      Environment:
        Variables:
          ENV: !Sub ${Env}
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: !Sub ${AppPath}/appContainer
      DockerTag: !Sub ${Env}

  PathLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-path
      CodeUri: !Sub ${AppPath}/appPath
      Handler: index.handler
      MemorySize: 256
      Timeout: 10
      Runtime: nodejs18.x
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref AutoscalingSampleTable
      - LambdaInvokePolicy:
          FunctionName: !Ref ContainerLambda
      Tags:
        Env: !Sub ${Env}
      Environment:
        Variables:
          ENV: !Sub ${Env}
          FunctionName: !Ref ContainerLambda

  KinesisLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-serial
      CodeUri: !Sub ${AppPath}/appSerial
      Handler: index.handler
      MemorySize: 256
      Timeout: 10
      Runtime: nodejs18.x
      Tags:
        Env: !Sub ${Env}
      Environment:
        Variables:
          ENV: !Sub ${Env}
      Policies:
      - KinesisStreamReadPolicy:
          StreamName: !GetAtt KinesisStream.Arn
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisStream.Arn
            StartingPosition: LATEST
            BatchSize: 20
            MaximumBatchingWindowInSeconds: 1
            MaximumRetryAttempts: 2
            BisectBatchOnFunctionError: true
            ParallelizationFactor: 10

  HttpApiAuth:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-auth
      CodeUri: !Sub ${AppPath}/appAuth
      Handler: index.handler
      Timeout: 10
      Runtime: nodejs18.x
      Tags:
        Env: !Sub ${Env}
      Environment:
        Variables:
          ENV: !Sub ${Env}

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub ${AWS::StackName}-http-api
      StageName: !Ref StageName
      Tags:
        Env: !Sub ${Env}
      StageVariables:
        StageVar: !Ref StageName
      FailOnWarnings: true
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '
          {
            "accountId":"$context.accountId",
            "requestTime":"$context.requestTime",
            "requestId":"$context.requestId",
            "ip":"$context.identity.sourceIp",
            "userAgent":"$context.identity.userAgent",
            "httpMethod":"$context.httpMethod",
            "resourcePath":"$context.path",
            "status":"$context.status",
            "protocol":"$context.protocol",
            "responseLength":"$context.responseLength",
            "integrationErrorMessage":"$context.integrationErrorMessage",
            "integrationStatus":"$context.integration.status",
            "integrationLatency":"$context.integration.latency",
            "integrationError":"$context.integration.error",
            "authorizerPrincipalId":"$context.authorizer.principalId",
            "body":"$context.authorizer.body",
            "authorizerError":"$context.authorizer.error",
            "responseType":"$context.error.responseType",
            "message":"$context.error.message"
          }'

  FunctionInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-http-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-http-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: '*'

  HttpApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-HttpApiAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerCredentialsArn: !GetAtt FunctionInvokeRole.Arn
      AuthorizerResultTtlInSeconds: 0
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${HttpApiAuth}/invocations
      IdentitySource:
      - $request.header.Authorization
      AuthorizerPayloadFormatVersion: 2.0
      EnableSimpleResponses: true

  PathLambdaRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: POST /path
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub integrations/${PathLambdaIntegration}

  PathLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      ConnectionType: INTERNET
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${PathLambda}/invocations
      CredentialsArn: !GetAtt LambdaProxyRole.Arn
      TimeoutInMillis: 20000
      PayloadFormatVersion: 1.0

  KinesisProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: POST /kinesis
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub integrations/${KinesisProxyIntegration}

  KinesisProxyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      ConnectionType: INTERNET
      IntegrationType: AWS_PROXY
      IntegrationSubtype: Kinesis-PutRecord
      RequestParameters:
        PartitionKey: $request.body.segment
        Data: $request.body
        StreamName: !Sub ${AWS::StackName}-kinesis
      CredentialsArn: !GetAtt KinesisProxyRole.Arn
      TimeoutInMillis: 20000
      PayloadFormatVersion: 1.0

  KinesisProxyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-apigw-kinesis-proxy-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      - arn:aws:iam::aws:policy/AmazonKinesisFullAccess

  LambdaProxyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-apigw-lambda-proxy-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"apigateway.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      - arn:aws:iam::aws:policy/AWSLambda_FullAccess

  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub ${AWS::StackName}-kinesis
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
      ShardCount: 1
      Tags:
      - Key: Env
        Value: !Sub ${Env}

  AutoscalingSampleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-AutoscalingSample
      AttributeDefinitions:
      - AttributeName: uuid
        AttributeType: S
      KeySchema:
      - AttributeName: uuid
        KeyType: HASH
      # BillingMode: PAY_PER_REQUEST
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        WriteCapacityUnits: 2
        ReadCapacityUnits: 2
      Tags:
      - Key: Env
        Value: !Sub ${Env}

  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 20
      MinCapacity: 1
      ResourceId: !Join [/, [table, !Ref AutoscalingSampleTable]]
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
      RoleARN: !GetAtt AutoscalingRole.Arn

  WriteAutoscalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-WriteAutoscaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 60.0
        ScaleOutCooldown: 0
        ScaleInCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  ReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 20
      MinCapacity: 1
      ResourceId: !Join [/, [table, !Ref AutoscalingSampleTable]]
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
      RoleARN: !GetAtt AutoscalingRole.Arn

  ReadAutoscalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-ReadAutoscaling
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 60.0
        ScaleOutCooldown: 0
        ScaleInCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-application-autoscaling-role
      AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"application-autoscaling.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
      MaxSessionDuration: 3600
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:DescribeTable
            - dynamodb:UpdateTable
            - cloudwatch:PutMetricAlarm
            - cloudwatch:DescribeAlarms
            - cloudwatch:GetMetricStatistics
            - cloudwatch:SetAlarmState
            - cloudwatch:DeleteAlarms
            Resource: '*'

  AccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /apigateway/${AWS::StackName}-http-accessLog
      RetentionInDays: 90

  PathLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-path
      RetentionInDays: 90

  SerialLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-serial
      RetentionInDays: 90

  AuthLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-auth
      RetentionInDays: 90

Outputs:
  HttpApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Sub: https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: HttpApi
